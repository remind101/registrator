package vulcand

import (
	"fmt"
	"log"
	"net"
	"net/url"
	"strconv"

	"github.com/coreos/go-etcd/etcd"
	"github.com/gliderlabs/registrator/bridge"
)

func init() {
	bridge.Register(new(Factory), "vulcand")
}

type Factory struct{}

func (f *Factory) New(uri *url.URL) bridge.RegistryAdapter {
	urls := make([]string, 0)
	if uri.Host != "" {
		urls = append(urls, "http://"+uri.Host)
	}
	return &VuldcandAdapter{client: etcd.NewClient(urls), path: uri.Path}
}

type VuldcandAdapter struct {
	client *etcd.Client
	path   string
}

func (r *VuldcandAdapter) Ping() error {
	rr := etcd.NewRawRequest("GET", "version", nil, nil)
	_, err := r.client.SendRequest(rr)
	if err != nil {
		return err
	}
	return nil
}

func (r *VuldcandAdapter) Register(service *bridge.Service) error {
	backend_path := r.path + "/backends/" + service.Name + "/backend"
	_, backend_err := r.client.Create(backend_path, "{\"Type\": \"http\"}", 0)
	if backend_err == nil {
		log.Println("registrator: vulcand: autogenerated backend:", service.Name)
	}

	frontend_path := r.path + "/frontends/" + service.Name + "/frontend"
	_, frontend_err := r.client.Create(
		frontend_path,
		fmt.Sprintf("{\"Type\": \"http\", \"BackendId\": \"%s\", \"Route\": \"Host(`%s.%s`)\"}", service.Name, service.Name, service.Host),
		0,
	)
	if frontend_err == nil {
		log.Println("registrator: vulcand: autogenerated frontend:", service.Name)
	}

	path := r.path + "/backends/" + service.Name + "/servers/" + service.ID
	port := strconv.Itoa(service.Port)
	addr := "{\"URL\": \"http://" + net.JoinHostPort(service.IP, port) + "\"}"
	_, err := r.client.Set(path, addr, uint64(service.TTL))
	if err != nil {
		log.Println("registrator: vulcand: failed to register service:", err)
	}
	return err
}

func (r *VuldcandAdapter) Deregister(service *bridge.Service) error {
	path := r.path + "/backends/" + service.Name + "/servers/" + service.ID
	_, err := r.client.Delete(path, false)
	if err != nil {
		log.Println("registrator: vulcand: failed to register service:", err)
	}
	return err
}

func (r *VuldcandAdapter) Refresh(service *bridge.Service) error {
	return r.Register(service)
}
